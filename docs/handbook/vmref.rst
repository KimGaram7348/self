*************************
Virtual Machine Reference
*************************

.. toctree::

   buildvm

Startup options
===============

The following command-line options are recognised by the Virtual Machine:

+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -f   |   filename Reads filename (which should contain Self source) immediately after startup (after reading the snapshot) and evaluates the contents. Useful for setting options, installing personal shortcuts, etc.  |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -h   |   Prints a message describing the options                                                                                                                                                                        |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -p   |   Suppresses execution of the expression snapshotAction postRead after reading a snapshot. Useful if something in the startup sequence causes the system to break.                                               |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -s   |   snapshot Reads initial world from snapshot. A snapshot begins with the line *exec Self -s $0 $@* which causes the Virtual Machine to begin execution with the snapshot.                                        |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -w   |   Don’t print warnings about object code                                                                                                                                                                         |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

These options are provided for use by Self VM implementors:

+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -F   |   Discards any machine code saved in the snapshot. If the code in a snapshot is for some reason corrupted, but the objects are not, this option can be used to recover the snapshot.                             |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -l   |   logfile Writes a log of events generated by the spy to logfile.                                                                                                                                                |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -r   |   Disables real timer interrupts                                                                                                                                                                                 |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  -t   |   Disables all timers                                                                                                                                                                                            |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Other command-line options are ignored by the Virtual Machine but are available at Self level via
the primitive ``_CommandLine``.

The standard set of Self objects (built by the ``worldBuilder.self`` script) also defines ``-b`` (where the ``objects`` director is) and ``-o`` (for specifying build options)

System-triggered messages
=========================

Certain events cause the system to automatically send a message to the lobby. After reading a snapshot
the expression ``snapshotAction postRead`` is evaluated. This allows the Self world to
reinitialize itself—for example, to reopen windows.

There are other situations in which the system sends messages; see `Run-time message lookup errors`_.

.. index::
   single:  _Perform

.. index::
   single:  ambiguousSelector:Type:Delegatee:MethodHolder:Arguments:

.. index::
   single:  mismatchedArgumentCountSelector:Type:Delegatee:MethodHolder:Arguments:

.. index::
   single:  missingDelegateeSelector:Type:Delegatee:MethodHolder:Arguments:

.. index::
   single:  performTypeErrorSelector:Type:Delegatee:MethodHolder:Arguments:

.. index::
   single:  errors; runtime errors

.. index::
   single:  undefinedSelector:Type:Delegatee:MethodHolder:Arguments

Run-time message lookup errors
==============================

If an error occurs during a message send, the system sends a message to the receiver of the message.
Any object can handle these errors by defining (or inheriting) a slot with the corresponding
selector. All messages sent by the system in response to a message lookup error have the same arguments.
The first argument is the offending message’s selector; the additional arguments specify
the message send type (one of ’``normal``’, ’``implicitSelf``’, ’``undirectedResend``’, ’``directedResend``’,
or ’``delegated``’), the directed resend parent name or the delegatee (0 if not
applicable), the sending method holder, and a vector containing the arguments to the message, if
any.

  ``undefinedSelector:Type:Delegatee:MethodHolder:Arguments``:
    The receiver does not understand the message: no slot matching the selector can be found in the receiver or its ancestors.

  ``ambiguousSelector:Type:Delegatee:MethodHolder:Arguments``:
    There is more than one slot matching the selector.

  ``missingParentSelector:Type:Delegatee:MethodHolder:Arguments``:
    The parent slot through which the resend should have been directed was not found in the sending method holder.

  ``mismatchedArgumentCountSelector:Type:Delegatee:MethodHolder:Arguments``:
    The number of arguments supplied to the _Perform primitive does not match the number of arguments required by the selector.

  ``performTypeErrorSelector:Type:Delegatee:MethodHolder:Arguments``:
    The first argument to the _Perform primitive (the selector) wasn’t a canonical string.

These error messages are just like any other message. Therefore, it is possible that the object P
causing the error (which is being sent the appropriate error message) does not understand the error
message *M* either. If this happens, the system sends the first message (``undefinedSelector:``) to
the current process, with the error message M as argument. If this is not understood, then the system
suspends the process. If the scheduler is running, it is notified of the failure.

The system will also suspend a process if it runs out of stack space (too much recursion) or if a
block is evaluated whose lexically-enclosing scope has already returned. Since these errors are
nonrecoverable they cannot be caught by the same Self process; the scheduler, if running, is notified.

Low-level error messages
========================

Five kinds of errors can occur during the execution of a Self program: lookup errors, primitive errors,
programmer defined errors, non-recoverable errors, and fatal VM errors. All but the last of
these are usually caught and handled by mechanisms in the programming environment, resulting
in a debugger being presented to the user. However, if programs are run without the programming
environment, or the error-handling mechanisms themselves are broken, low-level error facilities
are used.

This section describes the various error messages presented by the low-level facilities. For each
category or error, the general layout of error messages in that category will be explained along with
the format of the stack trace. Then a “rogue’s gallery” of the errors in that category will be shown.

By default, errors are handled by a set of methods defined in module ``errorHandling``. For all errors
except nonrecoverable and fatal VM errors, an object can handle errors in its own way by defining
its own error handling methods. If the object in which an error occurs neither inherits nor
defines error handling behavior, the VM prints out a low-level error message and a stack trace. The
system will also resort to this low-level message and trace if an error is encountered while trying
to handle an error.

An example
==========

Here is an expression that produces an error in the current system:

::

  “Self 7” 100000 factorial
  The stack has grown too big.
  (Self limits stack sizes, and cannot resume processes with stack overflows.)
  To debug type “attach” or to show stack type “zombies first printError”.

The error arose because the recursive method factorial exceeded the size allocated for the process
stack which resulted in a stack overflow.

The virtual machine currently allocates a fixed-size stack to each process and does not extend the stack on demand.

Lookup errors
=============

Lookup errors occur when an object does not understand a message that is sent to it. How the actual
message lookup is done is described in the Language Reference Manual.

  ``No ’foo’ slot found in shell <0>.``
    The lookup found no slot matching the selector ``foo``.

  |  ``More than one ’system’ slot was found in shell <0>.``
  |  ``The matching slots are: oddballs <6> and prototypes <7>.``

    The lookup found two matching ``system`` slots which means the message is ambiguous. The
    error message also says where the matching slots were found.

  ``No ’fish’ delegatee slot was found in <a child of lobby> <12>.``
    The lookup found no parent slot ``fish``, which was explicitly specified as the delegatee
    of the message.

Programmer defined errors
=========================

These are explicitly raised in the Self program to report errors, e.g. sending the message ``first``
to an empty list will cause such an error.

  |  ``Error: first is absent.``
  |  ``Receiver is: list <7>.``

Use the selectors ``error:`` and ``error:Arguments:`` to raise a programmer defined error.

Primitive errors
================

Primitive failures occur when a primitive cannot perform the requested operation, for example, because
of a missing or invalid argument.

  |  ``badTypeError: the ’_IntAdd:’ primitive failed.``
  |  ``Its receiver was shell <6>.``

The primitive failed with ``badTypeError`` because the shell in not an integer.

  ``The selector 12 could not be sent to shell because it is not a string.``
    The primitive ``_Perform`` expects a string as its first argument.

  ``The selector ’add:’ could not be sent to shell <0> because it does not take 2 arguments.``
    The primitive ``_Perform`` received the wrong number of arguments.

There are many other kinds of possible primitive errors.

Nonrecoverable process errors
=============================

Errors that stop a process from continuing execution are referred to as nonrecoverable errors.

  |  The stack has grown too big.
  |  (Self 4.0 limits stack sizes, and cannot resume processes with stack
  |  overflows.)

    A stack overflow error occurs because the current version of Self allocates a
    fixed size stack for each process, and the stack cannot be expanded.

  |  Self 4.0 cannot run a block after its enclosing method has returned.
  |  (Self cannot resume this process, either.)

    This error occurs if a block is executed after its lexically enclosing method has returned.
    This is called a “non-LIFO” block. Non-LIFO blocks are not supported by
    the current version of Self.

.. index::
   single:  fatal errors

Fatal errors
============

In rare cases, the virtual machine may encounter a fatal error (e.g., a resource limit is exceeded or
an internal error is discovered). When this happens, a short menu is displayed:

::

    VM Version: 4.0.5, Tue 27 Jun 95 13:35:49 Solaris 2.x (svr4)
    Internal error: signal 11 code 3 addr 4 pc 0x1ac768.
    Do you want to:
    1) Quit Self (optionally attempting to write a snapshot)
    2) Try to print the Self stack
    3) Try to return to the Self prompt
    4) Force a core dump
    Your choice:

The first two lines help the Self implementors locate the problem. Printing the Self stack may
provide more information about the problem but does not always work. Returning to the Self
prompt may be successful, but the system integrity may have been compromised as a result of the
error. The safest course is to attempt to write a snapshot (if there are unsaved changes), and then
check the integrity of the snapshot by executing the primitive ``_Verify`` after starting it. If there are
any error messages from the primitive, do not attempt to continue using the snapshot.

Since fatal errors usually arise from a bug in the virtual machine, please send the Self group a bug
report, and include a copy of the error message if possible. If the error is reproducible please describe
how to reproduce it (including a snapshot or source files may be helpful).

.. index::
   single:  canonicalStringMirror

.. index::
   single:  outerActivationMirror

.. index::
   single:  outerMethodMirror

.. index::
   single:  processMirror

.. index::
   single:  objVectorMirror

.. index::
   single:  floatMirror

.. index::
   single:  integer

.. index::
   single:  mirrorMirror

.. index::
   single:  floating-point numbers; parent of

.. index::
   single:  floating-point numbers

.. index::
   single:  slotsMirror

.. index::
   single:  smiMirror

.. index::
   single:  strings

.. index::
   single:  strings; canonical strings

.. index::
   single:  mirrors

.. index::
   single:  snapshotAction

.. index::
   single:  systemObjects

.. index::
   single:  true

.. index::
   single:  shell

.. index::
   single:  proxy

.. index::
   single:  objVector

.. index::
   single:  nil

.. index::
   single:  lobby

.. index::
   single:  fctProxy

.. index::
   single:  false


The initial Self world
======================

The diagram on the following pages shows all objects in the “bare” Self world. In addition, literals
like integers, floats, and strings are conceptually part of the initial Self world; block and object
literals are created by the programmer as needed. All the objects in the system are created by adding
slots to these objects or by cloning them. :numref:`tableObjInWorld` lists all the initial objects and provides a short
description for each. Reading in the world rearranges the structure of the “bare” Self world (see :doc:`selfwrld`).

.. _initialSelfWorld:
.. figure:: images/Chapter_5_Figure_3.*

    The initial Self world (part 1)

.. figure:: images/Chapter_5_Figure_4.*
    :scale: 100

    The initial Self world (part 2)

.. index::
   single:  lobby

.. tabularcolumns:: p{5cm} p{10cm}
.. _tableObjInWorld:
.. table:: Objects in the initial Self world

  +----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | Object               |         Description                                                                                                                                                                            |
  +----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | lobby                |         The center of the Self object hierarchy, and the context in which expressions typed in at the VM prompt, read in via \_RunScript, or used as the initializers of slots, are evaluated. |
  +----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. tabularcolumns:: p{5cm} p{10cm}
.. table:: Objects in the lobby

  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
  | shell              |        After reading in the world, shell is the context in which expressions typed in at the prompt are evaluated.                                |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
  | snapshotAction     |        An object with slot for the startup action (see `System-triggered messages`_), postRead. This slot initially contains nil.                 |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
  | systemObjects      |        This object contains slots containing the general system objects, including nil, true, false, and the prototypical vectors and mirrors.    |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+

.. tabularcolumns:: p{5cm} p{10cm}
.. table:: Objects in systemObjects

  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | nil                |           The initializer for slots that are not explicitly initialized. Indicates “not a useful object.”                                                                                                                                  |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | true               |           Boolean true. Argument to and returned by some primitives.                                                                                                                                                                       |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | false              |           Boolean false. Argument to and returned by some primitives.                                                                                                                                                                      |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | vector             |           The prototype for (normal) vectors.                                                                                                                                                                                              |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | byteVector         |           The prototype for byte vectors.                                                                                                                                                                                                  |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | proxy              |           The prototype for proxy objects.                                                                                                                                                                                                 |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | fctProxy           |           The prototype for fctProxy objects.                                                                                                                                                                                              |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | vector parent      |           The object that vector inherits from. Since all object vectors will inherit from this object (because they are cloned from vector), this object will be the repository for shared behavior (a traits object) for vectors.        |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | byteVector parent  |           Similar to vector parent: the byteVector traits object.                                                                                                                                                                          |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | slotAnnotation     |           The default slot annotation object.                                                                                                                                                                                              |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | objectAnnotation   |           The default object annotation object                                                                                                                                                                                             |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | profiler           |           The prototype for profilers.                                                                                                                                                                                                     |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | mirrors            |           See below.                                                                                                                                                                                                                       |
  +--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. index::
   single:  block

.. tabularcolumns:: p{5cm} p{10cm}
.. table:: Literals and their parents

  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | integers           |           Integers have one slot, a parent slot called parent. All integers have the same parent: see 0 parent, below.                                                                                                                                                    |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | 0 parent           |           All integers share this parent, the integer traits object.                                                                                                                                                                                                      |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | floats             |           Floats have one slot, a parent slot called parent. All floats have the same parent: see 0.0 parent, below.                                                                                                                                                      |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | 0.0 parent         |           All floats share this parent, the float traits object.                                                                                                                                                                                                          |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | canonical strings  |           In addition to a byte vector part, a canonical string has one slot, parent, a parent slot containing the same object for all canonical strings (see ’’parent below).                                                                                            |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | ''parent           |           All canonical strings share this parent, the string traits object.                                                                                                                                                                                              |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | blocks             |           Blocks have two slots: parent, a parent slot containing the same object for all blocks (see \[\] parent, below), and value (or value:, or value:With:, etc., depending on the number of arguments the block takes) which contains the block’s deferred method.  |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
  | \[ \] parent       |           All blocks share this parent, the block traits object.                                                                                                                                                                                                          |
  +--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. index::
   single:  assignmentMirror

.. index::
   single:  blockActivationMirror

.. index::
   single:  blockMethodMirror

.. index::
   single:  blockMirror

.. index::
   single:  byteVector

.. index::
   single:  byteVectorMirror

.. tabularcolumns:: p{5cm} p{10cm}
.. table:: Prototypical mirrors

    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    smiMirror                            |      Prototypical mirror on a small integer; the reflectee is 0.                                                      |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    floatMirror                          |      Prototypical mirror on a float; the reflectee is 0.0.                                                            |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    stringMirror                         |      Prototypical mirror on a canonical string; the reflectee is the empty canonical string (’’).                     |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    processMirror                        |      Prototypical mirror on a process; the reflectee is the initial process.                                          |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    byteVectorMirror                     |      Prototypical mirror on a byte vector; the reflectee is the prototypical byte vector.                             |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    objVectorMirror                      |      Prototypical mirror on object vectors; the reflectee is the prototypical object vector.                          |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    assignmentMirror                     |      Mirror on the assignment primitive; the actual reflectee is an empty object.                                     |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    mirrorMirror                         |      Prototypical mirror on a mirror; the reflectee is slotsMirror.                                                   |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    slotsMirror                          |      Prototypical mirror on a plain object without code; the reflectee is an empty object.                            |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    blockMirror                          |      Prototypical mirror on a block.                                                                                  |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    methodMirror                         |      Prototypical mirror on a normal method.                                                                          |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    blockMethodMirror                    |      Prototypical mirror on a block method.                                                                           |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    methodActivationMirror               |      Prototypical mirror on a method activation.                                                                      |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    blockMethodActivationMirror          |      Prototypical mirror on a block activation.                                                                       |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    proxyMirror                          |      Prototypical mirror on a proxy.                                                                                  |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    fctProxyMirror                       |      Prototypical mirror on a fctProxy.                                                                               |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |    profilerMirror                       |      Prototypical mirror on a profiler.                                                                               |
    +-----------------------------------------+-----------------------------------------------------------------------------------------------------------------------+

All of the prototypical mirrors consist of one slot, a parent slot named parent. Each of
these parent slots points to an empty object (denoted in :numref:`initialSelfWorld` by “( )”).

.. index::
   single:  _PrintOptionPrimitives

.. index::
   single:  _PrintPeriod

.. index::
   single:  _PrintScriptName


Option Primitives
=================

**This section has not been updated to include all options present in Self 4.0.**

Option primitives control various aspects of the Self system and its inner workings. Many of
them are used to debug or instrument the Self system and are probably of little interest to users.
The options most useful for users are listed in :numref:`tableOptionPrimitives`; other option primitives can be found in Appendix
5.B, and a list of all option primitives and their current settings can be printed with the
primitive ``_PrintOptionPrimitives.``

.. index::
   single:  _DirPath

.. index::
   single:  _Spy

.. index::
   single:  _Spy:

.. index::
   single:  _StackPrintLimit


.. tabularcolumns:: p{5cm} p{10cm}
.. _tableOptionPrimitives:
.. table:: Some useful option primitives

  +----------------------------+-----------------------------------------------------------------------------------+
  |  Name                      |   Description                                                                     |
  +============================+===================================================================================+
  |  \_PrintPeriod[:]          |   Print a period when reading a script file with \_RunScript. Default: false.     |
  +----------------------------+-----------------------------------------------------------------------------------+
  |  \_PrintScriptName[:]      |   Print the file name when reading a script file. Default: false.                 |
  +----------------------------+-----------------------------------------------------------------------------------+
  |  \_Spy[:]                  |   Start the system monitor (see Appendix 5.A for details). Default: false.        |
  +----------------------------+-----------------------------------------------------------------------------------+
  |  \_StackPrintLimit[:]      |   Controls the number of stack frames printed by _PrintProcessStack. Default:20.  |
  +----------------------------+-----------------------------------------------------------------------------------+
  |  \_DirPath[:]              |   The default directory path for script files.                                    |
  +----------------------------+-----------------------------------------------------------------------------------+

Each option primitive controls a variable within the virtual machine containing a boolean, integer,
or string (in fact, the option primitives can be thought of as “primitive variables”). Invoking the
version of the primitive that doesn’t take an argument [#f1]_ returns the current setting; invoking it with
an argument sets the variable to the new value and returns the old value.

Try running the system monitor with *_Spy: true*. The system monitor will continuously display
various information about the system’s activities and your memory usage.

